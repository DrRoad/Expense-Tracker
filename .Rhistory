shiny::runApp()
runApp()
runApp()
runApp()
install.packages("bcrypt")
library(bcrypt)
pw <- "super-secret"
hash <- hashpw(pw)
identical(hash, hashpw(pw))
identical(hash, hashpw(pw, hash))
checkpw(hash, pw)
checkpw(pw, hash)
runApp()
runApp()
runApp()
runApp()
list.files()
install.packages("RSQLite")
library(RSQLite)
library(DBI)
db <- dbConnect(RSQLite::SQLite(), DB_NAME)
DB_NAME <- "data.sqlite"
db <- dbConnect(RSQLite::SQLite(), DB_NAME)
dbDisconnect(db)
unlink(DB_NAME)
db <- dbConnect(RSQLite::SQLite(), DB_NAME)
dbDisconnect(db)
unlink(DB_NAME)
dbListTables(db)
db <- dbConnect(RSQLite::SQLite(), DB_NAME)
dbListTables(db)
!("users" %in% dbListTables(db)
)
if(!("users" %in% dbListTables(db))){
df <- data.frame(id = as.numeric(character()),
user = character(),
hash = character(),
stringsAsFactors = FALSE)
}
df
library(dplyr)
library(lubridate)
filter(df, user = "abc")
filter(df, user == "abc")
is.null(filter(df, user == "abc"))
nrow(filter(df, user == "abc"))
uuid::UUIDgenerate()
uuid::UUIDgenerate()
uuid::UUIDgenerate()
uuid::UUIDgenerate(use.time = FALSE)
uuid::UUIDgenerate(use.time = FALSE)
db <- dbConnect(RSQLite::SQLite(), DB_NAME)
df <- dbReadTable(db, TBL_USER_DATA)
TBL_USER_DATA <- "users"
df <- dbReadTable(db, TBL_USER_DATA)
if(!(TBL_USER_DATA %in% dbListTables(db))){
df <- data.frame(ID = as.numeric(character()),
USER = character(),
HASH = character(),
stringsAsFactors = FALSE)
dbWriteTable(db, TBL_USER_DATA, df)
}
df <- dbReadTable(db, TBL_USER_DATA)
df
dbSendQuery(db, paste("INSERT INTO", TBL_USER_DATA, "(ID, USER, HASH) (", nrow(df), ",", usr, ",", hsh))
DB_add_user <- function(usr, hsh){
db <- dbConnect(RSQLite::SQLite(), DB_NAME)
df <- dbReadTable(db, TBL_USER_DATA)
dbSendQuery(db, paste("INSERT INTO", TBL_USER_DATA, "(ID, USER, HASH) (", nrow(df), ",", usr, ",", hsh))
dbDisconnect(db)
}
DB_add_user("jc", hash)
hash
DB_add_user <- function(usr, hsh){
db <- dbConnect(RSQLite::SQLite(), DB_NAME)
df <- dbReadTable(db, TBL_USER_DATA)
q <- paste("INSERT INTO", TBL_USER_DATA, "(ID, USER, HASH) (", nrow(df), ",", usr, ",", hsh)
print(q)
dbSendQuery(db, q)
dbDisconnect(db)
}
DB_add_user("jc", hash)
DB_add_user <- function(usr, hsh){
db <- dbConnect(RSQLite::SQLite(), DB_NAME)
df <- dbReadTable(db, TBL_USER_DATA)
q <- paste("INSERT INTO", TBL_USER_DATA, "(ID, USER, HASH) VALUES (", nrow(df), ",", usr, ",", hsh)
print(q)
dbSendQuery(db, q)
dbDisconnect(db)
}
DB_add_user("jc", hash)
DB_add_user <- function(usr, hsh){
db <- dbConnect(RSQLite::SQLite(), DB_NAME)
df <- dbReadTable(db, TBL_USER_DATA)
q <- paste("INSERT INTO", TBL_USER_DATA, "(ID, USER, HASH) VALUEs (", nrow(df), ",", usr, ",", hsh, ")")
print(q)
dbSendQuery(db, q)
dbDisconnect(db)
}
DB_add_user("jc", hash)
DB_add_user <- function(usr, hsh){
db <- dbConnect(RSQLite::SQLite(), DB_NAME)
df <- dbReadTable(db, TBL_USER_DATA)
q <- paste("INSERT INTO", TBL_USER_DATA, "(ID, USER, HASH) VALUEs (", paste("", nrow(df), ",", usr, ",", hsh, "", sep="'"), ")")
print(q)
dbSendQuery(db, q)
dbDisconnect(db)
}
DB_add_user("jc", hash)
df <- dbReadTable(db, TBL_USER_DATA)
df
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(bcrypt)
pw <- "super-secret"
hash <- hashpw(pw)
identical(hash, hashpw(pw, hash))
checkpw(pw, hash)
hashpw(pw)
hash <- hashpw(pw)
identical(hash, hashpw(pw, hash))
checkpw(pw, hash)
checkpw(pw, hash)
hashpw(pw, hash)
library("bcrypt", lib.loc="~/R/win-library/3.4")
remove.packages("bcrypt", lib="~/R/win-library/3.4")
pw <- "super-secret"
hash <- sha256(pw)
library(openssl)
pw <- "super-secret"
hash <- sha256(pw)
hash
identical(hash, sha256(pw))
shiny::runApp()
pw <- "super-secret"
hash <- sha256(pw)
hash
identical(hash, sha256(pw))
pw <- "super-secret"
hash <- sha256(pw)
identical(hash, sha256(pw))
runApp()
db <- dbConnect(RSQLite::SQLite(), DB_NAME)
DB_NAME <- "data.sqlite"
TBL_USER_DATA <- "users"
db <- dbConnect(RSQLite::SQLite(), DB_NAME)
dbDisconnect(db)
dbDisconnect(db)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinythemes")
install.packages("shinythemes")
install.packages("shinythemes")
library(shinythemes)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
c(T,T) && c(T, F)
c(T,T) & c(T, F)
runApp()
runApp()
runApp()
runApp()
starwars
starwars$species
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(quantmod)
base_cur <- "USD"
foreign_cur <- "EUR"
fx_str <- paste(base_cur, foreign_cur, sep="/")
d <- today()
getFX(Currencies = fx_str, from = d, to = d)
getFX(Currencies = fx_str,to = d)
getFX(Currencies = fx_str,to = d, from = d - days(1))
fx_str <- paste(foreign_cur, base_cur, sep="/")
d <- today()
getFX(Currencies = fx_str,to = d, from = d - days(1))
getFX(Currencies = fx_str,to = d, from = d - days(1), env = NULL)
getFX(Currencies = fx_str,to = d, from = d, env = NULL)[1]
getFX(Currencies = fx_str,to = d, from = d, env = NULL)[1,1]
getFX(Currencies = fx_str,to = d, from = d, env = NULL)
getFX(Currencies = fx_str,to = d, from = d - days(1), env = NULL)
getQuote(fx_str, src = "oanda")
getFX(Currencies = fx_str,to = d, env = NULL)
getQuote(fx_str)
getQuote(paste0(foreign_cur, base_cur, "=X"))
getSymbols("EUR=X",src="yahoo",from="2005-01-01")
getSymbols("EUR=X",src="yahoo",from=today())
getSymbols("EUR=X",src="yahoo",from=today(), env = NULL)
df <- getSymbols("EUR=X",src="yahoo",from=today(), env = NULL)
Cl(df)
Cl(df)[1]
1/Cl(df)[1]
DB_NAME <- "data.sqlite"
TBL_USER_DATA <- "users"
db <- dbConnect(RSQLite::SQLite(), DB_NAME)
dbListTables(db)
alarm()
alarm()
head(starwars)
filter(starwars, name == NULL)
filter(starwars, name == "a")
filter(starwars, name == "")
filter(starwars, name == NA)
db <- dbConnect(RSQLite::SQLite(), DB_NAME)
usr = "jcb"
df <- dbReadTable(db, usr)
df
runApp()
runApp()
runApp()
runApp()
dollar(100)
library(scales)
dollar(100)
dollar(x = 100.0)
dollar(x = 100.98)
runApp()
shiny::runApp()
get_FX_rate <- function(date){
df <- getSymbols("EUR=X",src="yahoo",from=date, to=date, env = NULL)
conversion_factor <- 1/Cl(df)[1]
return(conversion_factor)
}
get_FX_rate(today())
get_FX_rate <- function(date){
df <- quantmod::getSymbols("EUR=X",src="yahoo",from=date, to=date, env = NULL)
conversion_factor <- 1/Cl(df)[1]
return(conversion_factor)
}
get_FX_rate(today())
get_FX_rate <- function(date){
df <- quantmod::getSymbols("EUR=X",src="yahoo",from=date, to=date, env = NULL)
conversion_factor <- 1/quantmod::Cl(df)[1]
return(conversion_factor)
}
get_FX_rate(today())
get_FX_rate <- function(date, currency = "EUR"){
df <- quantmod::getSymbols(paste(currency,"X", sep="="),src="yahoo",from=date, to=date, env = NULL)
conversion_factor <- 1/quantmod::Cl(df)[1]
return(conversion_factor)
}
get_FX_rate(today())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
