{
    "collab_server" : "",
    "contents" : "\nlibrary(shiny)\nlibrary(DBI)\nlibrary(dplyr)\nlibrary(scales)\nlibrary(lubridate)\nlibrary(openssl)\nlibrary(shinythemes)\n\n# Database ----------------------------------------------------------------\n\nDB_NAME <- \"data.sqlite\"\nTBL_USER_DATA <- \"users\"\n\nDB_test_connect <- function(){\n  db <- dbConnect(RSQLite::SQLite(), DB_NAME)\n  \n  print(\"#######################\")\n  print(\"- Connected to Database\")\n  \n  # If a user data table doesn't already exist, create one\n  if(!(TBL_USER_DATA %in% dbListTables(db))){\n    print(\"- Warning: No 'users' table found. Creating table...\")\n    df <- data.frame(ID = as.numeric(character()),\n                     USER = character(),\n                     HASH = character(),\n                     cycle_end_date = as_date(character()),\n                     theme = character(),\n                     stringsAsFactors = FALSE)\n    dbWriteTable(db, TBL_USER_DATA, df)\n  } \n  \n  print(\"- Table exists.\")\n  print(\"#######################\")\n  \n  dbDisconnect(db)\n}\n\nDB_upload_csv <- function(filename, tblname){\n  db <- dbConnect(RSQLite::SQLite(), DB_NAME)\n  \n  df <- read.csv(file = filename, header = T, row.names = F, stringsAsFactors = F)\n  \n  dbWriteTable(db, tblname, df)\n  \n  dbDisconnect(db)\n}\n\nDB_get_user <- function(user){\n  db <- dbConnect(RSQLite::SQLite(), DB_NAME)\n  \n  users_data <- dbReadTable(db, TBL_USER_DATA)\n  \n  users_data <- filter(users_data, USER == user)\n  \n  dbDisconnect(db)\n  \n  return(users_data)\n}\nDB_add_user <- function(usr, hsh){\n  db <- dbConnect(RSQLite::SQLite(), DB_NAME)\n  \n  df <- dbReadTable(db, TBL_USER_DATA)\n  \n  q <- paste(\"INSERT INTO\", TBL_USER_DATA, \"(ID, USER, HASH) VALUES (\", paste(\"\", nrow(df), \",\", usr, \",\", hsh, \"\", sep=\"'\"), \")\")\n  \n  #print(q)\n  \n  dbSendQuery(db, q)\n  \n  dbWriteTable(db, usr, data.frame(id = as.numeric(character()),          # Transaction ID\n                                   date = as_date(character()),           # Date\n                                   class = character(),                   # Expense, Withdrawal, Deposit\n                                   amount = as.numeric(character()),      # Amount\n                                   currency = character(),                # Currency\n                                   conv_amount = as.numeric(character()), # Amount in base currency\n                                   conv_currency = character(),           # Base currency \n                                   fx_rate = as.numeric(character()),     # FX rate on date\n                                   category = character(),                # Category\n                                   comments = character()                 # Comments on Expense\n  ))\n  \n  suppressWarnings({dbDisconnect(db)})\n  \n}\n\nDB_add_record <- function(usr, dt, clss, amt, curr, cnv_amt, cnv_curr, rate, ctgry, cmnts){\n  db <- dbConnect(RSQLite::SQLite(), DB_NAME)\n  \n  if(usr %in% dbListTables(db)){\n    df <- dbReadTable(db, usr)\n    q <- paste(\"INSERT INTO\", usr, \"(id, date, class, amount, currency, conv_amount, conv_currency, fx_rate, category, comments)\",\n               \"VALUES (\", paste(\"\", nrow(df), \",\",\n                                 dt, \",\",\n                                 clss, \",\",\n                                 amt, \",\",\n                                 curr, \",\",\n                                 cnv_amt, \",\",\n                                 cnv_curr, \",\",\n                                 rate, \",\",\n                                 ctgry, \",\",\n                                 cmnts, \"\", sep=\"'\"), \")\")\n    print(paste(\"- Query:\", q))\n    dbSendQuery(db, q)\n    print(\"- Record added\")\n  } else {\n    print(\"- User's expense table does not exist\")\n  }\n  \n  dbDisconnect(db)\n}\nDB_add_expense <- function(usr, dt, amt, curr, cnv_amt, cnv_curr, rate, ctgry, cmnts){\n  DB_add_record(usr = usr, dt = dt, clss = \"Expense\", amt = amt, curr = curr, cnv_amt = cnv_amt, cnv_curr = cnv_curr, rate = rate, ctgry = ctgry, cmnts = cmnts)\n}\nDB_add_deposit <- function(usr, dt, amt, curr, cnv_amt, cnv_curr, rate, ctgry, cmnts){\n  DB_add_record(usr = usr, dt = dt, clss = \"Deposit\", amt = amt, curr = curr, cnv_amt = cnv_amt, cnv_curr = cnv_curr, rate = rate, ctgry = ctgry, cmnts = cmnts)\n}\n\nDB_get_records <- function(usr, clss = NULL, ID = NULL, ctgry = NULL){\n  db <- dbConnect(RSQLite::SQLite(), DB_NAME)\n  \n  df <- NULL\n  \n  if(usr %in% dbListTables(db)){\n    df <- dbReadTable(db, usr)\n    \n    if(!is.null(clss)){\n      df <- filter(df, class %in% clss)\n    }\n  \n    if(!is.null(ID)){\n      df <- filter(df, id %in% ID)\n    }\n    \n    if(!is.null(ctgry)){\n      df <- filter(df, category %in% ctgry)\n    }\n    \n  } else {\n    print(\"- User's records do not exist\")\n  }\n  \n  dbDisconnect(db)\n  return(df)\n}\nDB_get_deposit <- function(usr){\n  DB_get_records(usr = usr, clss = c(\"Deposit\"))\n}\nDB_get_expense <- function(usr){\n  DB_get_records(usr = usr, clss = c(\"Expense\"))\n}\n\nDB_update_user_field <- function(usr, hsh, field, value){\n  db <- dbConnect(RSQLite::SQLite(), DB_NAME)\n  \n  df <- dbReadTable(db, TBL_USER_DATA)\n  \n  print(paste(\"- Attempting to update user field:\", field, \"with value:\", value))\n\n  df <- df[df$USER == usr & df$HASH == hsh,]\n\n  if(nrow(df) > 0){\n    q <- paste(\"UPDATE\", TBL_USER_DATA, \"SET\", field, paste(\"= '\", value, \"' WHERE HASH = '\", hsh, \"'\", \" AND USER = '\", usr, \"'\", sep=\"\"))\n    print(paste(\"- Query:\", q))\n    dbSendQuery(db, q)\n    print(paste(\"- User: settings updated\"))\n  } else {\n    print(\"- Invalid Login Information: no user found\")\n  }\n  \n  dbDisconnect(db)\n}\n\nDB_get_user_field <- function(usr, hsh, field){\n  db <- dbConnect(RSQLite::SQLite(), DB_NAME)\n  \n  df <- dbReadTable(db, TBL_USER_DATA)\n  \n  df <- filter(df, (USER == usr && hsh == HASH))\n  \n  dbDisconnect(db)\n  \n  if(nrow(df) > 0){\n    return(df[1,field])\n  }\n  \n  return(NA)\n}\n\n# Init Database -----------------------------------------------------------\n\nDB_test_connect()\n\n# Functions and Presets ---------------------------------------------------------------\n\nTHEMES <- c(\"darkly\", \"cerulean\")\n\nget_FX_rate <- function(date, currency = \"EUR\"){\n  df <- quantmod::getSymbols(paste(currency,\"X\", sep=\"=\"),src=\"yahoo\",from=date, to=date, env = NULL)\n  conversion_factor <- 1/quantmod::Cl(df)[1]\n  return(conversion_factor)\n}\n\n# Server ------------------------------------------------------------------\n\nshinyServer(function(input, output, session) {\n  \n  # User App Information\n  loggedIn <- reactiveVal(value = FALSE)\n  user <- reactiveVal(value = NULL)\n  cycle_end <- reactiveVal(value = NULL)\n  ui_theme <- reactiveVal(value = NULL)\n  ui_theme_str <- reactiveVal(value = NULL)\n  user.base_currency <- reactiveVal(value = \"USD\")\n  user.fx_currency <- reactiveVal(value = \"EUR\")\n  \n  # User App Events\n  logout <- function(){\n    user(NULL)\n    loggedIn(FALSE)\n    cycle_end(NULL)\n    ui_theme(NULL)\n    ui_theme_str(NULL)\n    #user.base_currency(NULL)\n    #user.base_currency(NULL)\n    print(\"- User: logged out\")\n  }                                   # Logout function \n  set_ui <- function(s){\n    if(is.null(s) || is.na(s)){\n      ui_theme <- NULL\n    } else {\n      ui_theme(shinytheme(s))\n    }\n    ui_theme_str(s)\n  }                                  # Set theme function\n  \n  login <- eventReactive(input$login, {\n    \n    user_data <- DB_get_user(input$username)\n    \n    if(nrow(user_data) > 0){ # If the active user is in the DB then logged in\n      if(sha256(input$password) == user_data[1, \"HASH\"]){\n        \n        user(input$username)\n        loggedIn(TRUE)\n        cycle_end(user_data[1,\"cycle_end_date\"])\n        \n        if(is.null(user_data[1,\"theme\"]) || is.na(user_data[1,\"theme\"])){\n          set_ui(NULL)\n        } else {\n          set_ui(user_data[1,\"theme\"])\n        }\n        \n        print(paste(\"- User:\", user(), \"logged in\"))\n        \n        return(TRUE)\n      }\n    }\n    \n    return(FALSE)\n    \n  })                  # Login observer\n  register_user <- eventReactive(input$register_user, {\n    \n    users_data <- DB_get_user(input$new_user)\n    \n    if(nrow(users_data) > 0){\n      return(span(\"User already exists\", style = \"color:red\"))\n    }\n    \n    new_hash <- sha256(input$new_pw)\n    new_user <- input$new_user\n    \n    DB_add_user(new_user, new_hash)\n    \n    print(\"- New user added to database\")\n    \n    return(span(\"New user registered\", style = \"color:green\"))\n    \n  })  # New user event (adds to DB)\n  observeEvent(input$create_login, {\n    showModal(\n      modalDialog(title = \"Create Login\", size = \"m\", \n                  textInput(inputId = \"new_user\", label = \"Username\"),\n                  passwordInput(inputId = \"new_pw\", label = \"Password\"),\n                  actionButton(inputId = \"register_user\", label = \"Submit\"),\n                  p(input$register_user),\n                  uiOutput(\"register_status\")\n                  \n      )\n    )\n    \n    register_user()\n    \n  })                     # New user event (opens dialogue)\n  observeEvent(loggedIn()==TRUE, {\n    updateDateInput(session = session, inputId = \"settings.cycle_end\", label = \"Update Cycle End Date\", value = cycle_end())\n    updateSelectInput(session = session, inputId = \"settings.theme\", label = \"Theme\", choices = THEMES, selected = ui_theme_str())\n  })                       # Post-Login App adjustments\n  observeEvent(input$settings.update, {\n    if(!is.null(input$settings.cycle_end) && input$settings.cycle_end != cycle_end()){\n      end_date <- as_date(input$settings.cycle_end)\n      days_left <- end_date - today()\n      weeks_left <- days_left/7\n      \n      DB_update_user_field(usr = input$username, hsh = sha256(input$password), field = \"cycle_end_date\", value = end_date)\n      \n      cycle_end(end_date) #Store the cycle end in the reactive value container\n    }\n    \n    if(!is.null(input$settings.theme) && (is.null(ui_theme_str()) || input$settings.theme != ui_theme_str())){\n      set_ui(input$settings.theme)\n      updateSelectInput(session = session, inputId = \"settings.theme\", label = \"Theme\", choices = THEMES, selected = ui_theme_str())\n      DB_update_user_field(usr = input$username, hsh = sha256(input$password), field = \"theme\", value = input$settings.theme)\n    }\n    \n  })                  # Update App settings\n  observe({\n    req(input$tabs)\n    if(input$tabs == \"Logout\"){\n      logout()\n    }\n  })                                              # Logout observer\n  \n  # App UI ------------------------------------------------------------\n  observe({\n    if(loggedIn()){\n      output$App_Panel <- renderUI({\n          navbarPage(title = \"Expense Tracker\", id = \"tabs\", \n                     # Overview Tab ------------------------------------------------------------\n                     tabPanel( title = \"Overview\", icon = icon(\"hub\"), \n                               sidebarLayout(\n                                 sidebarPanel(width = 3,\n                                              fluidRow(\n                                                h4(\"Net Cash Available:\", align = \"center\"),\n                                                strong(textOutput(\"user.net_cash\"), align = \"center\")), hr(),\n                                              fluidRow(\n                                                h4(\"Weeks Remaining in Cycle:\", align = \"center\"),\n                                                strong(textOutput(\"user.weeks_remaining\"), align = \"center\")), hr(),\n                                              fluidRow(\n                                                h4(\"Net Cash per Week in Cycle:\", align = \"center\"),\n                                                strong(textOutput(\"user.weekly_net_cash\"), align = \"center\")), hr(),\n                                              fluidRow(\n                                                h4(\"Foreign Net Cash per Week in Cycle:\", align = \"center\"),\n                                                strong(textOutput(\"user.weekly_net_fx\"), align = \"center\"))\n                                 ),\n                                 mainPanel(\n                                   column(width = 7,\n                                          h4(\"Expense Record\"),\n                                          tableOutput(\"overview.expense_table\")\n                                   ),\n                                   column(width = 5,\n                                          h4(\"Historical Spending\"),\n                                          plotOutput(\"overview.historical_spending\")\n                                   )\n                                 )\n                               )\n                     ),\n                     # Expenses Tab ------------------------------------------------------------\n                     tabPanel( title = \"Expenses\", icon = icon(\"credit-card\"), \n                               fluidRow(\n                                 column(7,\n                                        h4(\"Expense History\", align = \"center\"),\n                                        dataTableOutput(\"expense.history_table\")\n                                 ),\n                                 column(3,\n                                        h4(\"Add Expense\", align = \"center\"),\n                                        hr(),\n                                        fluidRow(\n                                          column(5, selectInput(inputId = \"expense_entry.currency\", label = \"Currency\", \n                                                                choices = c(\"USD\", \"EUR\"), selected = \"USD\", multiple = FALSE)),\n                                          column(7, numericInput(inputId = \"expense_entry.amount\", label = \"Amount\",\n                                                                 value = NULL, min = 0))\n                                        ),\n                                        fluidRow(\n                                          column(5, dateInput(inputId = \"expense_entry.date\", label = \"Date\", \n                                                              value = today(), weekstart = 1)),\n                                          column(7, textInput(inputId = \"expense_entry.category\", label = \"Category\"))\n                                        ),\n                                        fluidRow(\n                                          column(12,\n                                                 textAreaInput(inputId = \"expense_entry.comment\", label = \"Comments\", resize = \"vertical\"),\n                                                 hr(),\n                                                 actionButton(inputId = \"expense_entry.add\", label = \"Submit\"),\n                                                 hr(),\n                                                 textOutput(outputId = \"expense_entry.status\")\n                                          )\n                                        )\n                                 )\n                               )\n                     ),\n                     # Savings Tab ------------------------------------------------------------\n                     tabPanel( title = \"Savings\", icon = icon(\"usd\"), \n                               fluidRow(\n                                 column(7,\n                                        h4(\"Savings History\", align = \"center\"),\n                                        dataTableOutput(\"savings.history_table\")\n                                 ),\n                                 column(3,\n                                        h4(\"Add Deposit/Withdrawal\", align = \"center\"),\n                                        hr(),\n                                        fluidRow(\n                                          column(5, textOutput(\"user.base_currency\")),\n                                          column(7, numericInput(inputId = \"savings_entry.amount\", label = \"Amount\",\n                                                                 value = 0, min = 0))\n                                        ),\n                                        fluidRow(\n                                          column(5, dateInput(inputId = \"savings_entry.date\", label = \"Date\", \n                                                              value = today(), weekstart = 1)),\n                                          column(7, textInput(inputId = \"savings_entry.category\", label = \"Category\"))\n                                        ),\n                                        fluidRow(\n                                          column(12,\n                                                 textAreaInput(inputId = \"savings_entry.comment\", label = \"Comments\", resize = \"vertical\"),\n                                                 hr(),\n                                                 actionButton(inputId = \"savings_entry.add\", label = \"Submit\"),\n                                                 hr(),\n                                                 textOutput(outputId = \"savings_entry.status\")\n                                          )\n                                        )\n                                 )\n                               )   \n                     ),\n                     # Menu Tabs ------------------------------------------------------------\n                     navbarMenu( title = paste(\"Logged in as\", user()), \n                                 tabPanel(title = \"Logout\", icon = icon(\"sign-out\"), value = \"Logout\",\n                                          p(\"logging out\")\n                                 ) ,\n                                 tabPanel(title = \"Settings\", icon = icon(\"wrench\"),\n                                          h4(paste(\"Current Cycle End:\", cycle_end() )),\n                                          hr(),\n                                          dateInput(inputId = \"settings.cycle_end\", label = \"Update Cycle End Date\", value = NULL, min = today(), weekstart = 1),\n                                          selectInput(inputId = \"settings.theme\", label = \"Theme\", choices = THEMES, selected = NULL, multiple = FALSE),\n                                          p(\"Theme changes will take effect upon reloading the app\"),\n                                          actionButton(inputId = \"settings.update\", label = \"Update\")\n                                 )\n                     ), theme = ui_theme()\n          )\n      })\n    } else {\n      \n      # Login Page --------------------------------------------------------------\n      \n      output$App_Panel <- renderUI({\n        fluidPage(theme = NULL,\n          fluidRow(\n            hr(),\n            titlePanel(title = \"Expense Tracker\"), align = \"center\"\n          ),\n          fluidRow(\n            column(4, offset = 4,\n                   wellPanel(\n                     h2(\"Login\", align = \"center\"),\n                     textInput(inputId = \"username\", label = \"Username\"),\n                     passwordInput(inputId = \"password\", label = \"Password\"),\n                     fluidRow(\n                       column(4, offset = 4, actionButton(inputId = \"login\", label = \"Login\")),\n                       column(4, offset = 4, actionLink(inputId = \"create_login\", label = \"Create login\")),\n                       column(6, offset = 3, uiOutput(outputId = \"login_status\")\n                       )\n                     )\n                   )\n            )\n          )\n        )\n      })\n    }\n  })\n  \n  # Outputs ------------------------------------------------------------\n  \n  output$register_status <- renderUI({\n    if(input$register_user == 0){\n      return(NULL)\n    } else {\n      register_user()\n    }\n  })\n  output$login_status <- renderUI({\n    if(input$login == 0){\n      return(NULL)\n    } else {\n      if(!login()){\n        return(span(\"The Username or Password is Incorrect\", style = \"color:red\"))\n      }\n    }\n  })\n  output$user.base_currency <- reactive({user.base_currency()})\n  output$user.fx_currency <- reactive({user.fx_currency()})\n  \n  # Overview\n  user.net_cash <- reactive({\n    df <- DB_get_records(usr = input$username)\n    total_expenses <- sum(df[df$class==\"Expense\", \"conv_amount\"])\n    total_deposits <- sum(df[df$class==\"Deposit\", \"conv_amount\"])\n    return(total_deposits-total_expenses)\n  })\n  user.weeks_remaining <- reactive({\n    round((as_date(cycle_end()) - today())/7, digits = 1)\n  })\n  user.weekly_net_cash <- reactive({\n    user.net_cash() / as.numeric(user.weeks_remaining())\n  })\n  user.weekly_net_fx <- reactive({\n    user.weekly_net_cash() / get_FX_rate(date = today(), currency = user.fx_currency())\n  })\n  \n  output$user.net_cash <- reactive({\n    paste(user.base_currency(), round(user.net_cash(),2))\n    })\n  output$user.weeks_remaining <- reactive({user.weeks_remaining()})\n  output$user.weekly_net_cash <- reactive({\n    paste(user.base_currency(), round(user.weekly_net_cash(),2))\n    })\n  output$user.weekly_net_fx <- reactive({\n    paste(user.fx_currency(), round(user.weekly_net_fx(),2))\n    })\n  \n  # Expenses\n  output$expense_entry.status <- eventReactive(input$expense_entry.add, {\n    validate(\n      need(input$expense_entry.amount, \"Missing 'Amount' input\"),\n      need(input$expense_entry.category, \"Missing 'Category' input\"),\n      need(input$expense_entry.comment, \"Missing 'Comments' input\"),\n      need(input$expense_entry.amount > 0, \"'Amount' should be positive\")\n    )\n    \n    if(input$expense_entry.currency == \"USD\"){\n      conversion_factor <- 1\n    } else {\n      conversion_factor <- get_FX_rate(as_date(input$expense_entry.date))\n    }\n    \n    converted_amt <- conversion_factor * input$expense_entry.amount\n    \n    DB_add_expense(usr = input$username, dt = input$expense_entry.date, amt = input$expense_entry.amount, \n                   curr = input$expense_entry.currency, cnv_amt = converted_amt, cnv_curr = \"USD\", rate = conversion_factor, \n                   ctgry = input$expense_entry.category, cmnts = input$expense_entry.comment)\n    \n    return(\"Expense added\")\n    \n  })\n  output$expense.history_table <- renderDataTable(DB_get_expense(usr = input$username))\n  \n  # Savings\n  output$savings_entry.status <- eventReactive(input$savings_entry.add, {\n    validate(\n      need(input$savings_entry.amount, \"Missing 'Amount' input\"),\n      need(input$savings_entry.category, \"Missing 'Category' input\"),\n      need(input$savings_entry.comment, \"Missing 'Comments' input\"),\n      need(input$savings_entry.amount > 0, \"'Amount' should be positive\")\n    )\n    \n    DB_add_deposit(usr = input$username,  dt = input$savings_entry.date, amt = input$savings_entry.amount, \n                   curr = \"USD\", cnv_amt = input$savings_entry.amount, cnv_curr = \"USD\", rate = 1, \n                   ctgry = input$savings_entry.category, cmnts = input$savings_entry.comment)\n    \n    return(\"Entry added\")\n  })\n  output$savings.history_table <- renderDataTable(DB_get_deposit(usr = input$username))\n})\n\n\n\n\n\n",
    "created" : 1519224144193.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "14|30|36|0|\n48|30|58|0|\n86|91|110|0|\n111|86|113|0|\n114|86|116|0|\n118|70|144|0|\n145|32|147|0|\n148|32|150|0|\n152|57|171|0|\n173|47|187|0|\n189|16|192|0|\n197|48|201|0|\n217|23|226|2|\n227|24|234|2|\n236|39|261|2|\n262|55|279|2|\n280|36|294|2|\n295|34|298|2|\n299|39|316|2|\n300|86|308|4|\n310|110|314|4|\n317|11|322|2|\n329|36|357|23|\n391|35|422|23|\n423|33|437|11|\n441|19|465|8|\n471|38|477|2|\n478|35|486|2|\n491|29|496|2|\n497|36|499|2|\n500|36|502|2|\n503|34|505|2|\n507|36|509|4|\n511|43|513|4|\n514|41|516|4|\n",
    "hash" : "2948046266",
    "id" : "B9D46393",
    "lastKnownWriteTime" : 1520450521,
    "last_content_update" : 1520450521704,
    "path" : "~/GitHub/Expense-Tracker/server.R",
    "project_path" : "server.R",
    "properties" : {
        "docOutlineVisible" : "1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}