{
    "collab_server" : "",
    "contents" : "\nlibrary(shiny)\nlibrary(DBI)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(openssl)\n\n# Database ----------------------------------------------------------------\n\nDB_NAME <- \"data.sqlite\"\nTBL_USER_DATA <- \"users\"\n\nDB_test_connect <- function(){\n  db <- dbConnect(RSQLite::SQLite(), DB_NAME)\n  \n  print(\"#######################\")\n  print(\"- Connected to Database\")\n  \n  # If a user data table doesn't already exist, create one\n  if(!(TBL_USER_DATA %in% dbListTables(db))){\n    print(\"- Warning: No 'users' table found. Creating table...\")\n    df <- data.frame(ID = as.numeric(character()),\n                     USER = character(),\n                     HASH = character(),\n                     stringsAsFactors = FALSE)\n    dbWriteTable(db, TBL_USER_DATA, df)\n  } \n  \n  print(\"- Table exists.\")\n  print(\"#######################\")\n  \n  dbDisconnect(db)\n}\n\nDB_upload_csv <- function(filename, tblname){\n  db <- dbConnect(RSQLite::SQLite(), DB_NAME)\n  \n  df <- read.csv(file = filename, header = T, row.names = F, stringsAsFactors = F)\n  \n  dbWriteTable(db, tblname, df)\n  \n  dbDisconnect(db)\n}\n\nDB_get_user <- function(user){\n  db <- dbConnect(RSQLite::SQLite(), DB_NAME)\n  \n  users_data <- dbReadTable(db, TBL_USER_DATA)\n  \n  users_data <- filter(users_data, USER == user)\n  \n  dbDisconnect(db)\n  \n  return(users_data)\n}\n\nDB_add_user <- function(usr, hsh){\n  db <- dbConnect(RSQLite::SQLite(), DB_NAME)\n  \n  df <- dbReadTable(db, TBL_USER_DATA)\n  \n  q <- paste(\"INSERT INTO\", TBL_USER_DATA, \"(ID, USER, HASH) VALUEs (\", paste(\"\", nrow(df), \",\", usr, \",\", hsh, \"\", sep=\"'\"), \")\")\n  \n  #print(q)\n  \n  dbSendQuery(db, q)\n  \n  suppressWarnings({dbDisconnect(db)})\n  \n}\n\n# Init Database -----------------------------------------------------------\n\nDB_test_connect()\n\n# Server ------------------------------------------------------------------\n\nshinyServer(function(input, output, session) {\n  \n  loggedIn <- reactiveVal(value = FALSE)\n  user <- reactiveVal(value = NULL)\n  \n  login <- eventReactive(input$login, {\n    \n    user_data <- DB_get_user(input$username)\n    \n    if(nrow(user_data) > 0){ # If the active user is in the DB then logged in\n      if(sha256(input$password) == user_data[1, \"HASH\"]){\n        \n        user(input$username)\n        loggedIn(TRUE)\n        \n        print(paste(\"- User:\", user(), \"logged in\"))\n        \n        return(TRUE)\n      }\n    }\n    \n    return(FALSE)\n    \n  })\n  register_user <- eventReactive(input$register_user, {\n    \n    users_data <- DB_get_user(input$new_user)\n    \n    if(nrow(users_data) > 0){\n      return(span(\"User already exists\", style = \"color:red\"))\n    }\n    \n    new_hash <- sha256(input$new_pw)\n    new_user <- input$new_user\n    \n    DB_add_user(new_user, new_hash)\n    \n    print(\"- New user added to database\")\n    \n    return(span(\"New user registered\", style = \"color:green\"))\n    \n  })\n  \n  output$register_status <- renderUI({\n    if(input$register_user == 0){\n      return(NULL)\n    } else {\n      register_user()\n    }\n  })\n  output$login_status <- renderUI({\n    if(input$login == 0){\n      return(NULL)\n    } else {\n      if(!login()){\n        return(span(\"The Username or Password is Incorrect\", style = \"color:red\"))\n      }\n    }\n  })\n  \n  observeEvent(input$create_login, {\n    showModal(\n      modalDialog(title = \"Create Login\", size = \"m\", \n                textInput(inputId = \"new_user\", label = \"Username\"),\n                passwordInput(inputId = \"new_pw\", label = \"Password\"),\n                actionButton(inputId = \"register_user\", label = \"Submit\"),\n                p(input$register_user),\n                uiOutput(\"register_status\")\n                \n                )\n    )\n\n    register_user()\n    \n  })\n  observeEvent(input$logout, {\n    user(NULL)\n    loggedIn(FALSE)\n    print(\"- User: logged out\")\n  })\n  \n  observe({\n    if(loggedIn()){\n      output$App_Panel <- renderUI({\n        fluidPage(\n          fluidRow(\n            strong(paste(\"logged in as\", user(), \"|\")), actionLink(inputId = \"logout\", \"Logout\"), align = \"right\",\n            hr()\n          ),\n          fluidRow(\n            titlePanel(title = \"APP UI GOES Here\"), align = \"center\"\n          )\n        )\n        \n      })\n    } else {\n      output$App_Panel <- renderUI({\n        fluidPage(\n          fluidRow(\n            hr(),\n            titlePanel(title = \"App Name\"), align = \"center\"\n          ),\n          fluidRow(\n            column(4, offset = 4,\n                   wellPanel(\n                     h2(\"Login\", align = \"center\"),\n                     textInput(inputId = \"username\", label = \"Username\"),\n                     passwordInput(inputId = \"password\", label = \"Password\"),\n                     fluidRow(\n                       column(4, offset = 4, actionButton(inputId = \"login\", label = \"Login\")),\n                       column(4, offset = 4, actionLink(inputId = \"create_login\", label = \"Create login\")),\n                       column(6, offset = 3, uiOutput(outputId = \"login_status\")\n                       )\n                     )\n                   )\n            )\n          )\n        )\n      })\n    }\n  })\n  \n\n})\n",
    "created" : 1519224144193.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "34|45|42|0|\n44|30|54|0|\n56|34|69|0|\n101|55|118|2|\n120|38|126|2|\n127|35|135|2|\n137|36|151|2|\n152|30|156|2|\n160|36|171|6|\n173|36|195|6|\n",
    "hash" : "4232387491",
    "id" : "B9D46393",
    "lastKnownWriteTime" : 1519299491,
    "last_content_update" : 1519299491949,
    "path" : "~/GitHub/Expense-Tracker/server.R",
    "project_path" : "server.R",
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}