{
    "collab_server" : "",
    "contents" : "\nlibrary(shiny)\n#library(DBI)\nlibrary(RMySQL)\nlibrary(data.table)\nlibrary(DT)\nlibrary(dplyr)\nlibrary(scales)\nlibrary(lubridate)\nlibrary(openssl)\nlibrary(shinythemes)\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(plotly)\nlibrary(ggthemes)\n\n# Database ----------------------------------------------------------------\n\nDB_NAME <- \"data\"\n\nTBL_USER_DATA <- \"users\"\n\nDB_get_connection <- function(){\n  dbConnect(MySQL(), \n            user= DB_USR, \n            password=DB_PW, \n            dbname=DB_NAME, \n            host=DB_HOST, \n            port = 3306)\n}\nDB_kill_connections <- function () {\n  \n  all_cons <- dbListConnections(MySQL())\n  \n  print(all_cons)\n  \n  for(con in all_cons)\n    +  dbDisconnect(con)\n  \n  print(paste(length(all_cons), \" connections killed.\"))\n  \n}\nDB_test_connect <- function(){\n  db <- DB_get_connection()#; \n  \n  print(\"#######################\")\n  print(\"- Connected to Database\")\n  \n  # If a user data table doesn't already exist, create one\n  if(!(TBL_USER_DATA %in% dbListTables(db))){\n    print(\"- Warning: No 'users' table found. Creating table...\")\n    df <- data.frame(ID = as.numeric(character()),\n                     USER = character(),\n                     HASH = character(),\n                     cycle_end_date = as_date(character()),\n                     cycle_start_date = as_date(character()),\n                     theme = character(),\n                     stringsAsFactors = FALSE)\n    \n    dbWriteTable(db, TBL_USER_DATA, df, row.names = FALSE)\n  } \n  \n  print(\"- Table exists.\")\n  print(\"#######################\")\n  \n  dbDisconnect(db)\n}\n\nDB_upload_df <- function(df, tblname){\n  db <- DB_get_connection(); \n  \n  current_df <- dbReadTable(db, tblname, row.names = FALSE) # Retrieve the current DB\n  \n  # Create IDs for new transactions\n  if(nrow(current_df) == 0){\n    df$id <- 1:nrow(df)\n  } else {\n    df$id <- max(current_df$id):(max(current_df$id) + nrow(df) - 1)\n  }\n  print(sort(colnames(current_df)))\n  print(sort(colnames(df)))\n  df <- df[,colnames(current_df)]\n  \n  print(\"### Data To Be Added ###\")\n  print(df)\n  \n  dbWriteTable(db, tblname, df, append = TRUE, row.names = FALSE)\n  \n  print(\"- Data Added\")\n  dbDisconnect(db)\n}\n\nDB_get_user <- function(user){\n  db <- DB_get_connection(); \n  \n  users_data <- dbReadTable(conn = db,name =  TBL_USER_DATA, row.names = NULL)\n  \n  users_data <- filter(users_data, USER == user)\n  \n  dbDisconnect(db)\n  \n  return(users_data)\n}\nDB_add_user <- function(usr, hsh){\n  db <- DB_get_connection(); \n  \n  df <- dbReadTable(db, TBL_USER_DATA, row.names=NULL)\n  \n  q <- paste(\"INSERT INTO\", TBL_USER_DATA, \"(ID, USER, HASH) VALUES (\", paste(\"\", nrow(df), \",\", usr, \",\", hsh, \"\", sep=\"'\"), \")\")\n  \n  #print(q)\n  \n  dbSendQuery(db, q)\n  \n  dbWriteTable(db, usr, data.frame(id = as.numeric(character()),          # Transaction ID\n                                   date = as_date(character()),           # Date\n                                   class = character(),                   # Expense, Withdrawal, Deposit\n                                   amount = as.numeric(character()),      # Amount\n                                   currency = character(),                # Currency\n                                   conv_amount = as.numeric(character()), # Amount in base currency\n                                   conv_currency = character(),           # Base currency \n                                   fx_rate = as.numeric(character()),     # FX rate on date\n                                   category = character(),                # Category\n                                   comments = character()                 # Comments on Expense\n  ), row.names= FALSE)\n  \n  suppressWarnings({dbDisconnect(db)})\n  \n}\n\nDB_remove_records <- function(usr, ids){\n  db <- DB_get_connection(); \n  \n  if(usr %in% dbListTables(db)){\n    df <- dbReadTable(db, usr, row.names = NULL)\n    q <- paste(\"DELETE FROM\", usr, \"WHERE id IN\", paste0(\"(\", paste(ids, collapse = \",\"), \")\") )\n    print(paste(\"- Query:\", q))\n  \n    dbSendStatement(db, q)\n    print(\"- Transactions removed.\")\n  } else {\n    print(\"- User's transaction table does not exist\")\n  }\n  \n  dbDisconnect(db)\n}\n\nDB_add_record <- function(usr, dt, clss, amt, curr, cnv_amt, cnv_curr, rate, ctgry, cmnts){\n  db <- DB_get_connection(); \n  \n  if(usr %in% dbListTables(db)){\n    df <- dbReadTable(db, usr, row.names = NULL)\n    # if(nrow(df) == 0){\n    #   id <- 1\n    # } else {\n    #   id <- max(df$id) + 1\n    # }\n    id <- max(max(df$id), 0) + 1 #id is one larger than the max of either the largest existing id and 0.\n              \n    q <- paste(\"INSERT INTO\", usr, \"(id, date, class, amount, currency, conv_amount, conv_currency, fx_rate, category, comments)\",\n               \"VALUES (\", paste(\"\", id, \",\",\n                                 dt, \",\",\n                                 clss, \",\",\n                                 amt, \",\",\n                                 curr, \",\",\n                                 cnv_amt, \",\",\n                                 cnv_curr, \",\",\n                                 rate, \",\",\n                                 ctgry, \",\",\n                                 cmnts, \"\", sep=\"'\"), \")\")\n    print(paste(\"- Query:\", q))\n    dbSendQuery(db, q)\n    print(\"- Record added\")\n  } else {\n    print(\"- User's transaction table does not exist\")\n  }\n  \n  dbDisconnect(db)\n}\nDB_add_expense <- function(usr, dt, amt, curr, cnv_amt, cnv_curr, rate, ctgry, cmnts){\n  DB_add_record(usr = usr, dt = dt, clss = \"Expense\", amt = amt, curr = curr, cnv_amt = cnv_amt, cnv_curr = cnv_curr, rate = rate, ctgry = ctgry, cmnts = cmnts)\n}\nDB_add_deposit <- function(usr, dt, amt, curr, cnv_amt, cnv_curr, rate, ctgry, cmnts){\n  DB_add_record(usr = usr, dt = dt, clss = \"Deposit\", amt = amt, curr = curr, cnv_amt = cnv_amt, cnv_curr = cnv_curr, rate = rate, ctgry = ctgry, cmnts = cmnts)\n}\n\nDB_modify_record <- function(usr, id, dt, clss, amt, curr, cnv_amt, cnv_curr, rate, ctgry, cmnts){\n  db <- DB_get_connection(); \n  \n  if(usr %in% dbListTables(db)){\n    \n    q <- paste(\"UPDATE\", usr, \n               paste(\"SET \",\n                     \"date = '\", dt,\"', \",\n                     \"class = '\", clss,\"', \",\n                     \"amount = \", amt,\", \",\n                     \"currency = '\", curr,\"', \",\n                     \"conv_amount = \", cnv_amt,\", \",\n                     \"conv_currency = '\", cnv_curr,\"', \",\n                     \"fx_rate = \", rate,\", \",\n                     \"category = '\", ctgry,\"', \",\n                     \"comments = '\", cmnts,\"'\", sep=\"\"),\n               \"WHERE id =\", id)\n    print(paste(\"- Query:\", q))\n    dbSendStatement(db, q)\n    print(\"- Transaction Updated\")\n  } else {\n    print(\"- User's transaction table does not exist\")\n  }\n  \n  dbDisconnect(db)\n}\n\nDB_get_records <- function(usr, clss = NULL, ID = NULL, ctgry = NULL){\n  db <- DB_get_connection(); \n  \n  df <- NULL\n  \n  if(usr %in% dbListTables(db)){\n    df <- dbReadTable(db, usr, row.names = NULL)\n    \n    if(!is.null(clss)){\n      df <- filter(df, class %in% clss)\n    }\n  \n    if(!is.null(ID)){\n      df <- filter(df, id %in% ID)\n    }\n    \n    if(!is.null(ctgry)){\n      df <- filter(df, category %in% ctgry)\n    }\n    \n  } else {\n    print(\"- User's records do not exist\")\n  }\n  \n  dbDisconnect(db)\n  return(df)\n}\nDB_get_deposit <- function(usr){\n  DB_get_records(usr = usr, clss = c(\"Deposit\"))\n}\nDB_get_expense <- function(usr){\n  DB_get_records(usr = usr, clss = c(\"Expense\"))\n}\n\nDB_update_user_field <- function(usr, hsh, field, value){\n  db <- DB_get_connection(); \n  \n  df <- dbReadTable(db, TBL_USER_DATA, row.names = FALSE)\n  \n  print(paste(\"- Attempting to update user field:\", field, \"with value:\", value))\n\n  df <- df[df$USER == usr & df$HASH == hsh,]\n\n  if(nrow(df) > 0){\n    q <- paste(\"UPDATE\", TBL_USER_DATA, \"SET\", field, paste(\"= '\", value, \"' WHERE HASH = '\", hsh, \"'\", \" AND USER = '\", usr, \"'\", sep=\"\"))\n    print(paste(\"- Query:\", q))\n    dbSendQuery(db, q)\n    print(paste(\"- User: settings updated\"))\n  } else {\n    print(\"- Invalid Login Information: no user found\")\n  }\n  \n  dbDisconnect(db)\n}\nDB_get_user_field <- function(usr, hsh, field){\n  db <- DB_get_connection(); \n  \n  df <- dbReadTable(db, TBL_USER_DATA, row.names = FALSE)\n  \n  df <- filter(df, (USER == usr && hsh == HASH))\n  \n  dbDisconnect(db)\n  \n  if(nrow(df) > 0){\n    return(df[1,field])\n  }\n  \n  return(NA)\n}\n\n# Init Database -----------------------------------------------------------\n\nDB_test_connect()\n\n# Functions and Presets ---------------------------------------------------------------\n\nTHEMES <- c(\"basic\",\"flatly\", \"lumen\", \"paper\", \"united\", \"yeti\", \"cerulean\")\n\nget_FX_rate <- function(date, currency = \"EUR\"){\n  df <- quantmod::getSymbols(paste(currency,\"X\", sep=\"=\"),src=\"yahoo\",from=date, to=date, env = NULL)\n  conversion_factor <- 1/quantmod::Cl(df)[1]\n  return(conversion_factor)\n}\nsummarise_expenses <- function(start_date, end_date, expense_tbl){\n  \n  start_date <- as_date(start_date) \n  end_date <- as_date(end_date)\n  \n  exp <- expense_tbl\n  \n  num_weeks <- ceiling(as.numeric(end_date - start_date)/7)\n  \n  tbl <- data.frame(week = 1:num_weeks,\n                    total = 0)\n  \n  tbl[unique(exp$category)] <- 0\n  \n  for(week in 1:num_weeks){\n    week_start <- start_date + days((week-1)*7) \n    week_end <- (start_date + days(6)) + days((week-1)*7)\n    \n    if(week_end > end_date){ week_end <- end_date} # If the cycle end predates the week's end, set week's end to cycle end\n    \n    exp_in_week <- exp[exp$date >= week_start & exp$date <= week_end,] # Retrieve the expenses for the current week\n    \n    aggr_tbl <- exp_in_week %>%              # Take expenses in the current week\n      group_by(category) %>%                 # Group expenses by category\n      summarise(cat_exp = sum(conv_amount))  # Aggregate expenses by category\n    \n    tbl[week, aggr_tbl$category] <- aggr_tbl$cat_exp # Assign expenditures back to Aggregate table\n  }\n  \n  tbl$total <- rowSums(tbl[,-1*1:2], na.rm = TRUE)\n  return(tbl)\n}\nget_overview_plot <- function(df, start_date, end_date){\n  df <- df[,!(colnames(df) %in% \"total\")]\n  plot.df <- melt(data = df, value.name = \"spent\", \"week\")\n  colnames(plot.df)[2] <- \"category\"\n  \n  p2 <- ggplot(data = plot.df, mapping = aes(x = week, y = spent, color = category)) + \n    geom_line(mapping = aes(x = week, y = spent)) + theme_dark() + xlab(\"Week\") + ylab(\"Amount (USD)\") +\n    ggtitle(\"Expense Trends by Week\", paste(\"For the period\", start_date, \"to\", end_date))\n  \n  plot.df$week <- as.factor(plot.df$week)\n  \n  p1 <- ggplot(data = plot.df, mapping = aes(x = week, y = spent, group = category, fill = category)) + \n    geom_bar(stat = \"identity\", position = \"dodge\") + theme_dark() +\n    scale_fill_discrete() + xlab(\"Week\") + ylab(\"Amount (USD)\") +\n    ggtitle(\"Expenses by Week\", paste(\"For the period\", start_date, \"to\", end_date))\n  \n  return(list(bar = p1, line = p2))\n}\ninit_action_button <- function(btn){\n  if(is.null(btn)){return(0)}else{btn}\n}\n\n# Server ------------------------------------------------------------------\n\n#Global DT options\noptions(DT.options = list(autoWidth = TRUE))\n\nshinyServer(function(input, output, session) {\n  \n  # User App Information\n  loggedIn <- reactiveVal(value = FALSE)\n  user <- reactiveVal(value = NULL)\n  cycle_end <- reactiveVal(value = NULL)\n  cycle_start <- reactiveVal(value = NULL)\n  ui_theme <- reactiveVal(value = NULL)\n  ui_theme_str <- reactiveVal(value = NULL)\n  user.base_currency <- reactiveVal(value = \"USD\")\n  user.fx_currency <- reactiveVal(value = \"EUR\")\n  user.categories <- reactiveVal(value = NULL)\n  \n  ### User App Events\n  logout <- function(){\n    user(NULL)\n    loggedIn(FALSE)\n    cycle_end(NULL)\n    cycle_start(NULL)\n    ui_theme(NULL)\n    ui_theme_str(NULL)\n    #user.base_currency(NULL)\n    #user.base_currency(NULL)\n    user.categories(NULL)\n    set_ui(\"basic\")\n    print(\"- User: logged out\")\n  }                                   # Logout function \n  set_ui <- function(s){\n    if(s == \"basic\"){ s <- NULL}\n    if(is.null(s) || is.na(s)){\n      ui_theme <- NULL\n    } else {\n      ui_theme(shinytheme(s))\n    }\n    ui_theme_str(s)\n  }                                  # Set theme function\n  \n  login <- eventReactive(input$login, {\n    \n    user_data <- DB_get_user(input$username)\n    \n    if(nrow(user_data) > 0){ # If the active user is in the DB then logged in\n      if(sha256(input$password) == user_data[1, \"HASH\"]){\n        \n        user(input$username)\n        loggedIn(TRUE)\n        cycle_end(user_data[1,\"cycle_end_date\"])\n        cycle_start(user_data[1,\"cycle_start_date\"])\n        \n        if(is.na(cycle_end())){cycle_end(NULL)}\n        if(is.na(cycle_start())){cycle_start(NULL)}\n        \n        if(is.null(user_data[1,\"theme\"]) || is.na(user_data[1,\"theme\"])){\n          set_ui(\"basic\")\n        } else {\n          set_ui(user_data[1,\"theme\"])\n        }\n        \n        user.categories(unique(DB_get_records(usr = user())[,\"category\"]))\n        \n        print(paste(\"- User:\", user(), \"logged in\"))\n        \n        return(TRUE)\n      }\n    }\n    \n    return(FALSE)\n    \n  })                  # Login observer\n  register_user <- eventReactive(input$register_user, {\n    \n    users_data <- DB_get_user(input$new_user)\n    \n    if(nrow(users_data) > 0){\n      return(span(\"User already exists\", style = \"color:red\"))\n    }\n    \n    new_hash <- sha256(input$new_pw)\n    new_user <- input$new_user\n    \n    DB_add_user(new_user, new_hash)\n    \n    print(\"- New user added to database\")\n    \n    return(span(\"New user registered\", style = \"color:green\"))\n    \n  })  # New user event (adds to DB)\n  observeEvent(input$create_login, {\n    showModal(\n      modalDialog(title = \"Create Login\", size = \"m\", \n                  textInput(inputId = \"new_user\", label = \"Username\"),\n                  passwordInput(inputId = \"new_pw\", label = \"Password\"),\n                  actionButton(inputId = \"register_user\", label = \"Submit\"),\n                  p(input$register_user),\n                  uiOutput(\"register_status\")\n                  \n      )\n    )\n    \n    register_user()\n    \n  })                     # New user event (opens dialogue)\n  observeEvent(loggedIn()==TRUE, {\n    updateDateInput(session = session, inputId = \"settings.cycle_end\", label = \"Update Cycle End Date\", value = cycle_end())\n    updateDateInput(session = session, inputId = \"settings.cycle_start\", label = \"Update Cycle Start Date\", value = cycle_start())\n    updateSelectInput(session = session, inputId = \"settings.theme\", label = \"Theme\", choices = THEMES, selected = ui_theme_str())\n  })                       # Post-Login App adjustments\n  observeEvent(input$settings.update, {\n    \n    if(!is.null(input$settings.cycle_end) && (is.null(cycle_end()) || input$settings.cycle_end != cycle_end())){\n      end_date <- as_date(input$settings.cycle_end)\n      \n      DB_update_user_field(usr = input$username, hsh = sha256(input$password), field = \"cycle_end_date\", value = end_date)\n      \n      cycle_end(end_date) #Store the cycle end in the reactive value container\n    }\n    if(!is.null(input$settings.cycle_start) && (is.null(cycle_start()) || input$settings.cycle_start != cycle_start())){\n      start_date <- as_date(input$settings.cycle_start)\n      \n      DB_update_user_field(usr = input$username, hsh = sha256(input$password), field = \"cycle_start_date\", value = start_date)\n      \n      cycle_start(start_date) #Store the cycle start in the reactive value container\n    }\n    if(!is.null(input$settings.theme) && (is.null(ui_theme_str()) || input$settings.theme != ui_theme_str())){\n      set_ui(input$settings.theme)\n      updateSelectInput(session = session, inputId = \"settings.theme\", label = \"Theme\", choices = THEMES, selected = ui_theme_str())\n      DB_update_user_field(usr = input$username, hsh = sha256(input$password), field = \"theme\", value = input$settings.theme)\n    }\n    \n  })                  # Update App settings\n  observeEvent(input$settings.add_category, {                 # Add category\n    validate(\n      need( !(input$settings.new_category_name %in% user.categories()), message = \"Category already exists\"),\n      need( !(tolower(input$settings.new_category_name) %in% sapply(user.categories(), tolower)), message = \"Category already exists\" )\n      )\n    user.categories(c(user.categories(), input$settings.new_category_name))\n    updateTextInput(session, inputId = \"settings.new_category_name\", label = \"Enter New Category\", value = \"\")\n  })            # Add Expense/Deposit Category\n  observe({\n    req(input$tabs)\n    if(input$tabs == \"Logout\"){\n      logout()\n    }\n  })                                              # Logout observer\n  \n  # Display-Modal Events\n  observeEvent(input$expense.add, {\n    showModal(modal.expense_entry())\n  })                      # \"Add Expense\" Dialogue\n  observeEvent(input$savings.add, {\n    showModal(modal.savings_entry())\n  })                      # \"Add Savings\" Dialogue\n  observeEvent(input$expense.delete, {\n    showModal(modal.expense_remove())\n  })                   # \"Delete Expense\" Dialogue\n  observeEvent(input$expense.delete_confirm, {\n    DB_remove_records(usr = input$username, ids = exp_tbl_selected()$id)\n    removeModal()\n  })           # Confirm and remove Expenses\n  observeEvent(input$savings.delete, {\n    showModal(modal.savings_remove())\n  })                   # \"Delete Savings\" Dialogue\n  observeEvent(input$savings.delete_confirm, {\n    DB_remove_records(usr = input$username, ids = sav_tbl_selected()$id)\n    removeModal()\n  })           # Confirm and remove Deposits\n  observeEvent(input$expense.modify, {\n    showModal(modal.expense_edit())\n  })                   # Modify Expense\n  observeEvent(input$savings.modify, {\n    showModal(modal.savings_edit())\n  })                   # Modify Deposity\n  \n  \n  # Global Event Functions\n  update_datatables <- reactive({\n    # List inputs to trigger updates\n    print(paste(input$expense_entry.add,\n    input$expense_modify.add,\n    input$expense.delete_confirm,\n    input$savings_entry.add,\n    input$savings_modify.add,\n    input$savings.delete_confirm,\n    input$expense.refresh,\n    input$savings.refresh,\n    new_transactions(), sep = \"|\"))\n    \n    return(NULL)\n  })\n  \n  # App UI ------------------------------------------------------------\n  observe({\n    if(loggedIn()){\n      output$App_Panel <- renderUI({\n          navbarPage(title = \"Expense Tracker\", id = \"tabs\", \n                     # Overview Tab ------------------------------------------------------------\n                     tabPanel( title = \"Overview\", icon = icon(\"bar-chart\"), \n                               sidebarLayout(\n                                 sidebarPanel(width = 3,\n                                              fluidRow(\n                                                h4(\"Net Cash Available:\", align = \"center\"),\n                                                strong(textOutput(\"user.net_cash\"), align = \"center\")), hr(),\n                                              fluidRow(\n                                                h4(\"Cycle Start:\", align = \"center\"),\n                                                strong(textOutput(\"user.cycle_start\"), align = \"center\")), hr(),\n                                              fluidRow(\n                                                h4(\"Cycle End:\", align = \"center\"),\n                                                strong(textOutput(\"user.cycle_end\"), align = \"center\")), hr(),\n                                              fluidRow(\n                                                h4(\"Weeks Remaining in Cycle:\", align = \"center\"),\n                                                strong(textOutput(\"user.weeks_remaining\"), align = \"center\")), hr(),\n                                              fluidRow(\n                                                h4(\"Net Cash per Week in Cycle:\", align = \"center\"),\n                                                strong(textOutput(\"user.weekly_net_cash\"), align = \"center\")), hr(),\n                                              fluidRow(\n                                                h4(\"Foreign Net Cash per Week in Cycle:\", align = \"center\"),\n                                                strong(textOutput(\"user.weekly_net_fx\"), align = \"center\"))\n                                 ),\n                                 mainPanel(\n                                   column(width = 12,\n                                          h4(\"Historical Spending\"),\n                                          plotlyOutput(\"overview.historical_spending\"),\n                                          br(),\n                                          column(4, offset = 4,\n                                                 selectInput(\"overview.plot_type\", label = \"Plot Type\", choices = c(\"bar\",\"line\"), multiple = FALSE, width = \"100%\")\n                                                 )\n                                          ),\n                                   column(width = 12,\n                                          hr(),\n                                          h4(\"Expense Record\"),\n                                          dataTableOutput(\"overview.expense_table\")\n                                   )\n                                 )\n                               )\n                     ),\n                     # Expenses Tab ------------------------------------------------------------\n                     tabPanel( title = \"Expenses\", icon = icon(\"credit-card\"), \n                               fluidRow(\n                                 column(12,\n                                        h4(\"Expense History\", align = \"center\"),\n                                        hr(),\n                                        column(6, offset = 3,\n                                               actionButton(inputId = \"expense.add\", label = \"Add Expense\", width = '30%'),\n                                               actionButton(inputId = \"expense.delete\", label = \"Delete Selected\", width = '30%'),\n                                               actionButton(inputId = \"expense.modify\", label = \"Modify Selected\", width = '30%'),\n                                               actionButton(inputId = \"expense.refresh\", label = \"\", icon = icon(\"refresh\"),  width = '8%')\n                                        ),\n                                        dataTableOutput(\"expense.history_table\")\n                                 )\n                               )\n                     ),\n                     # Savings Tab ------------------------------------------------------------\n                     tabPanel( title = \"Savings\", icon = icon(\"usd\"), \n                               fluidRow(\n                                 column(12,\n                                        h4(\"Savings History\", align = \"center\"),\n                                        hr(),\n                                        column(6, offset = 3,\n                                               actionButton(inputId = \"savings.add\", label = \"Add Deposit\", width = '30%'),\n                                               actionButton(inputId = \"savings.delete\", label = \"Delete Selected\", width = '30%'),\n                                               actionButton(inputId = \"savings.modify\", label = \"Modify Selected\",  width = '30%'),\n                                               actionButton(inputId = \"savings.refresh\", label = \"\", icon = icon(\"refresh\"),  width = '8%')\n                                        ),\n                                        dataTableOutput(\"savings.history_table\")\n                                 )\n                               )   \n                     ),\n                     # Menu Tabs ------------------------------------------------------------\n                     navbarMenu( title = paste(\"Logged in as\", user()), \n                                 tabPanel(title = \"Logout\", icon = icon(\"sign-out\"), value = \"Logout\",\n                                          p(\"logging out\")\n                                 ) ,\n                                 tabPanel(title = \"Settings\", icon = icon(\"wrench\"),\n                                          column(4,\n                                                 wellPanel(\n                                                   h3(\"Main App Settings\"),\n                                                   hr(),\n                                                   h4(paste(\"Current Cycle Start:\", cycle_start() )),\n                                                   h4(paste(\"Current Cycle End:\", cycle_end() )),\n                                                   hr(),\n                                                   dateInput(inputId = \"settings.cycle_start\", label = \"Update Cycle Start Date\", value = cycle_start(), max = today(), weekstart = 1),\n                                                   dateInput(inputId = \"settings.cycle_end\", label = \"Update Cycle End Date\", value = cycle_end(), min = today(), weekstart = 1),\n                                                   selectInput(inputId = \"settings.theme\", label = \"Theme\", choices = THEMES, selected = NULL, multiple = FALSE),\n                                                   p(\"Theme changes will take effect upon reloading the app\"),\n                                                   actionButton(inputId = \"settings.update\", label = \"Update\")\n                                                 )),\n                                          column(4,\n                                                 wellPanel(\n                                                   h3(\"Add Expense/Deposit Category\"), \n                                                   hr(),\n                                                   textOutput(outputId = \"settings.current_categories\"),\n                                                   textInput(inputId = \"settings.new_category_name\", label = \"Enter New Category\"),\n                                                   p(\"Categories must be added one at a time. If a new expense/deposit is not recorded, the category will not be remembered.\"),\n                                                   actionButton(inputId = \"settings.add_category\", label = \"Add Category\")\n                                                 )),\n                                          column(4,\n                                                 wellPanel(\n                                                   h3(\"Download Database Records\"),\n                                                   hr(),\n                                                   downloadButton(outputId = \"settings.DL.all_records\", label = \"All Records\"),\n                                                   downloadButton(outputId = \"settings.DL.expenses\", label = \"Expenses\"),\n                                                   downloadButton(outputId = \"settings.DL.deposits\", label = \"Deposits\")\n                                                 ),\n                                                 wellPanel(\n                                                   h3(\"Upload to Database Records\"),\n                                                   hr(),\n                                                   p(\"Download the template below to format your data to upload\"),\n                                                   downloadButton(outputId = \"settings.DL.upload_template\", label = \"Template\"),\n                                                   hr(),\n                                                   fileInput(\"settings.upload.new_records\", label = \"Upload (from template)\", multiple = FALSE),\n                                                   textOutput(\"settings.upload.new_records_status\")\n                                                 ))\n                                 )\n                     ), theme = ui_theme()\n          )\n      })\n    } else {\n      # Login Page --------------------------------------------------------------\n      \n      output$App_Panel <- renderUI({\n        fluidPage(theme = NULL,\n          fluidRow(\n            hr(),\n            titlePanel(title = \"Expense Tracker\"), align = \"center\"\n          ),\n          fluidRow(\n            column(4, offset = 4,\n                   wellPanel(\n                     h2(\"Login\", align = \"center\"),\n                     textInput(inputId = \"username\", label = \"Username\"),\n                     passwordInput(inputId = \"password\", label = \"Password\"),\n                     fluidRow(\n                       column(4, offset = 4, actionButton(inputId = \"login\", label = \"Login\", width = \"100%\")),\n                       column(4, offset = 4, actionLink(inputId = \"create_login\", label = \"Create login\", align = \"center\")),\n                       column(6, offset = 3, uiOutput(outputId = \"login_status\")\n                       )\n                     )\n                   )\n            )\n          )\n        )\n      })\n    }\n  })\n  \n  # Outputs ------------------------------------------------------------\n  \n  output$register_status <- renderUI({\n    if(input$register_user == 0){\n      return(NULL)\n    } else {\n      register_user()\n    }\n  })\n  output$login_status <- renderUI({\n    if(input$login == 0){\n      return(NULL)\n    } else {\n      if(!login()){\n        return(span(\"The Username or Password is Incorrect\", style = \"color:red\"))\n      }\n    }\n  })\n  output$user.base_currency <- reactive({user.base_currency()})\n  output$user.fx_currency <- reactive({user.fx_currency()})\n  \n  ## Overview\n  user.net_cash <- reactive({\n    update_datatables()\n    df <- DB_get_records(usr = input$username)\n    total_expenses <- sum(df[df$class==\"Expense\", \"conv_amount\"])\n    total_deposits <- sum(df[df$class==\"Deposit\", \"conv_amount\"])\n    return(total_deposits-total_expenses)\n  })\n  user.weeks_remaining <- reactive({\n    validate(need(!is.null(cycle_end()), message = \"Add Cycle Dates in Settings\"))\n    round((as_date(cycle_end()) - today())/7, digits = 1)\n  })\n  user.weekly_net_cash <- reactive({\n    \n    if(user.net_cash() < 0){ # If user has no positive net cash, the weekly cash going forward is 0\n      return(0)\n    }\n\n    if(user.weeks_remaining() > 1){\n      return(user.net_cash() / as.numeric(user.weeks_remaining()))\n    } else {\n      return(user.net_cash())\n    }\n  })\n  user.weekly_net_fx <- reactive({\n    user.weekly_net_cash() / get_FX_rate(date = today(), currency = user.fx_currency())\n  })\n  \n  # Sidebar\n  output$user.net_cash <- reactive({\n    paste(user.base_currency(), round(user.net_cash(),2))\n    })\n  output$user.weeks_remaining <- reactive({user.weeks_remaining()})\n  output$user.weekly_net_cash <- reactive({\n    paste(user.base_currency(), round(user.weekly_net_cash(),2))\n    })\n  output$user.weekly_net_fx <- reactive({\n    paste(user.fx_currency(), round(user.weekly_net_fx(),2))\n    })\n  output$user.cycle_start <- renderText({\n    validate(need(!is.null(cycle_start()), message = \"Add Cycle Dates in Settings\"))\n    as.character(as_date(cycle_start()))\n    })\n  output$user.cycle_end <- renderText({\n    validate(need(!is.null(cycle_end()), message = \"Add Cycle Dates in Settings\"))\n    as.character(as_date(cycle_end()))\n    })\n  \n  # Main Panel\n  data.expense_table <- reactive({\n    update_datatables()\n    validate(\n      need(!is.null(cycle_start()), \"Add Cycle Dates in Settings\"),\n      need(!is.null(cycle_end()), \"Add Cycle Dates in Settings\"),\n      need(nrow(DB_get_expense(user())) > 1, \"Need 2 or more expenses to analyze\")\n    )\n    input$expense_entry.add\n    summarise_expenses(start_date = cycle_start(), end_date = cycle_end(), expense_tbl = DB_get_expense(user()))\n  })\n  plot.overview <- reactive({\n    input$expense_entry.add\n    #selected_rows <- input$data.expense_table_rows_selected\n    get_overview_plot(df = data.expense_table(), start_date = cycle_start(), end_date = cycle_end())\n  })\n  \n  output$overview.expense_table <- renderDataTable({\n    datatable(data.expense_table(), rownames = FALSE) %>%\n      formatCurrency(colnames(data.expense_table())[-1], currency = \"$\", digits = 2) %>%\n      formatStyle(\"total\", backgroundColor = \"lightgray\")\n  })\n  output$overview.historical_spending <- renderPlotly({\n    plot.overview()[[input$overview.plot_type]]\n  })\n  \n  ## Expenses\n  exp_tbl <- reactive({\n    update_datatables()\n    DB_get_expense(usr = input$username)\n  })\n  exp_tbl_selected <- reactive({\n    selected_rows <- input$expense.history_table_rows_selected\n    exp_tbl()[selected_rows,]\n  })\n  exp_tbl_last_selected <- reactive({\n    selected_rows <- input$expense.history_table_row_last_clicked\n    exp_tbl()[selected_rows,]\n  })\n  output$expense_entry.status <- eventReactive(input$expense_entry.add, {\n    validate(\n      need(input$expense_entry.amount, \"Missing 'Amount' input\"),\n      need(input$expense_entry.category, \"Missing 'Category' input\"),\n      need(input$expense_entry.comment, \"Missing 'Comments' input\"),\n      need(input$expense_entry.amount > 0, \"'Amount' should be positive\")\n    )\n    \n    if(input$expense_entry.currency == \"USD\"){\n      conversion_factor <- 1\n    } else {\n      conversion_factor <- get_FX_rate(as_date(input$expense_entry.date))\n    }\n    \n    converted_amt <- conversion_factor * input$expense_entry.amount\n    \n    DB_add_expense(usr = input$username, dt = input$expense_entry.date, amt = input$expense_entry.amount, \n                   curr = input$expense_entry.currency, cnv_amt = converted_amt, cnv_curr = \"USD\", rate = conversion_factor, \n                   ctgry = input$expense_entry.category, cmnts = input$expense_entry.comment)\n    \n    return(\"Expense added\")\n  })\n  output$expense_modify.status <- eventReactive(input$expense_modify.add, {\n    validate(\n      need(input$expense_modify.amount, \"Missing 'Amount' input\"),\n      need(input$expense_modify.category, \"Missing 'Category' input\"),\n      need(input$expense_modify.comment, \"Missing 'Comments' input\"),\n      need(input$expense_modify.amount > 0, \"'Amount' should be positive\")\n    )\n    \n    if(input$expense_modify.currency == \"USD\"){\n      conversion_factor <- 1\n    } else {\n      conversion_factor <- get_FX_rate(as_date(input$expense_modify.date))\n    }\n    \n    converted_amt <- conversion_factor * input$expense_modify.amount\n    \n    DB_modify_record(usr = input$username, \n                   id = exp_tbl()[input$expense.history_table_row_last_clicked,\"id\"], \n                   dt = input$expense_modify.date, \n                   clss = \"Expense\",\n                   amt = input$expense_modify.amount, \n                   curr = input$expense_modify.currency, \n                   cnv_amt = converted_amt, \n                   cnv_curr = \"USD\", \n                   rate = conversion_factor, \n                   ctgry = input$expense_modify.category, \n                   cmnts = input$expense_modify.comment)\n    \n    return(\"Expense Updated \")\n  })\n  output$expense.history_table <- renderDataTable({\n    datatable(exp_tbl(), rownames = FALSE, \n              options=list(columnDefs = list(list(visible=FALSE, targets= c(2))),\n                           order = list(list(0, 'desc')))) %>% \n      formatDate(\"date\") %>%\n      formatRound(c(\"amount\", \"conv_amount\"), digits = 2) %>%\n      formatRound(\"fx_rate\", digits = 4) %>%\n      formatCurrency(\"conv_amount\")\n    })\n  output$expense.history_table_selected <- renderDataTable({\n    datatable(exp_tbl_selected(), rownames = FALSE, \n              options=list(columnDefs = list(list(visible=FALSE, targets= c(0,2))),\n                           order = list(list(0, 'desc')))) %>% \n      formatDate(\"date\") %>%\n      formatRound(c(\"amount\", \"conv_amount\"), digits = 2) %>%\n      formatRound(\"fx_rate\", digits = 4) %>%\n      formatCurrency(\"conv_amount\")\n  })\n  output$expense.history_table_last_selected <- renderDataTable({\n    datatable(exp_tbl_last_selected(), rownames = FALSE, \n              options=list(columnDefs = list(list(visible=FALSE, targets= c(0,2))),\n                           order = list(list(0, 'desc')))) %>% \n      formatDate(\"date\") %>%\n      formatRound(c(\"amount\", \"conv_amount\"), digits = 2) %>%\n      formatRound(\"fx_rate\", digits = 4) %>%\n      formatCurrency(\"conv_amount\")\n  })\n  \n  ## Savings\n  sav_tbl <- reactive({\n    update_datatables()\n    DB_get_deposit(usr = input$username)\n  })\n  sav_tbl_selected <- reactive({\n    selected_rows <- input$savings.history_table_rows_selected\n    sav_tbl()[selected_rows,]\n  })\n  sav_tbl_last_selected <- reactive({\n    selected_rows <- input$savings.history_table_row_last_clicked\n    sav_tbl()[selected_rows,]\n  })\n  output$savings_entry.status <- eventReactive(input$savings_entry.add, {\n    validate(\n      need(input$savings_entry.amount, \"Missing 'Amount' input\"),\n      need(input$savings_entry.category, \"Missing 'Category' input\"),\n      need(input$savings_entry.comment, \"Missing 'Comments' input\"),\n      need(input$savings_entry.amount > 0, \"'Amount' should be positive\")\n    )\n    \n    DB_add_deposit(usr = input$username,  dt = input$savings_entry.date, amt = input$savings_entry.amount, \n                   curr = \"USD\", cnv_amt = input$savings_entry.amount, cnv_curr = \"USD\", rate = 1, \n                   ctgry = input$savings_entry.category, cmnts = input$savings_entry.comment)\n    \n    return(\"Entry added\")\n  })\n  output$savings_modify.status <- eventReactive(input$savings_modify.add, {\n    validate(\n      need(input$savings_modify.amount, \"Missing 'Amount' input\"),\n      need(input$savings_modify.category, \"Missing 'Category' input\"),\n      need(input$savings_modify.comment, \"Missing 'Comments' input\"),\n      need(input$savings_modify.amount > 0, \"'Amount' should be positive\")\n    )\n    \n    DB_modify_record(usr = input$username, \n                   id = sav_tbl()[input$savings.history_table_row_last_clicked, \"id\"],  \n                   dt = input$savings_modify.date, \n                   clss = \"Deposit\",\n                   amt = input$savings_modify.amount, \n                   curr = \"USD\", \n                   cnv_amt = input$savings_modify.amount, \n                   cnv_curr = \"USD\", rate = 1, \n                   ctgry = input$savings_modify.category, \n                   cmnts = input$savings_modify.comment)\n    \n    return(\"Deposit Updated\")\n  })\n  output$savings.history_table <- renderDataTable({\n    datatable(sav_tbl(), rownames = FALSE, \n              options=list(columnDefs = list(list(visible=FALSE, targets= c(2) )))) %>% \n      formatDate(\"date\") %>%\n      formatRound(c(\"amount\", \"conv_amount\"), digits = 2) %>%\n      formatRound(\"fx_rate\", digits = 4) %>%\n      formatCurrency(\"conv_amount\")\n    })\n  output$savings.history_table_selected <- renderDataTable({\n    datatable(sav_tbl_selected(), rownames = FALSE, \n              options=list(columnDefs = list(list(visible=FALSE, targets= c(0,2) )))) %>% \n      formatDate(\"date\") %>%\n      formatRound(c(\"amount\", \"conv_amount\"), digits = 2) %>%\n      formatRound(\"fx_rate\", digits = 4) %>%\n      formatCurrency(\"conv_amount\")\n  })\n  output$savings.history_table_last_selected <- renderDataTable({\n    datatable(sav_tbl_last_selected(), rownames = FALSE, \n              options=list(columnDefs = list(list(visible=FALSE, targets= c(0,2) )))) %>% \n      formatDate(\"date\") %>%\n      formatRound(c(\"amount\", \"conv_amount\"), digits = 2) %>%\n      formatRound(\"fx_rate\", digits = 4) %>%\n      formatCurrency(\"conv_amount\")\n  })\n  \n  ## Menu\n  output$settings.current_categories <- renderText({\n    paste(\"Current Categories:\", paste(user.categories(), collapse = \", \"))\n  })\n  output$settings.DL.all_records <- downloadHandler(    filename = function() {\n      paste(user(),\"all_records.csv\", sep = \"_\")},    content = function(file) {\n      write.csv(x = DB_get_records(usr = user()), file, row.names = FALSE)})\n  output$settings.DL.expenses <- downloadHandler(    filename = function() {\n      paste(user(),\"expenses.csv\", sep = \"_\")},    content = function(file) {\n      write.csv(x = DB_get_expense(usr = user()), file, row.names = FALSE)})\n  output$settings.DL.deposits <- downloadHandler(    filename = function() {\n      paste(user(),\"deposits.csv\", sep = \"_\")},    content = function(file) {\n      write.csv(x = DB_get_deposit(usr = user()), file, row.names = FALSE)})\n  output$settings.DL.upload_template <- downloadHandler(filename = \"template.csv\", content = function(file){\n      df <- data.frame(date = \"Date in the format of YYYY-MM-DD\",\n                       class = \"transaction is Expense or Deposit\",\n                       amount = \"A numeric\",\n                       currency = \"Currently only USD and EUR are supported\",\n                       category = \"Describe the transaction in one word (food, drinks, transit, etc.)\",\n                       comments = \"Delete this row before uploading.\")\n      write.csv(x = df, file, row.names = FALSE)\n    })\n  \n  new_transactions <- reactive({\n    inFile <- input$settings.upload.new_records\n    \n    if(is.null(inFile)){\n      return(NULL)\n    }\n    \n    df <- read.csv(inFile$datapath, stringsAsFactors = FALSE)\n    df <- df[complete.cases(df),]\n    \n    print(df)\n    \n    validate(\n      need(\n        all(colnames(df) %in% c(\"date\", \"class\", \"amount\", \"currency\", \"category\", \"comments\")), \n        message = \"File columns are invalid\"),\n      need(\n        !any(sapply(names(sapply(as.character(df$date), as_date)), is.na)),  # Apply date to all strings, checks if results are NA. If any NAs then invalid\n        message = \"Date formats are invalid\"\n      ),\n      need(\n        all(df$class %in% c(\"Expense\", \"Deposit\")),\n        message = \"Class formats are invalid\"\n      ),\n      need(\n        !any(sapply(as.numeric(df$amount), is.na)), # Apply numeric to all strings, if any are NA then invalid\n        message = \"Amount formats are invalid\"\n      ),\n      need(\n        all(df$currency %in% c(\"USD\", \"EUR\")),\n        message = \"Currency formats are invalid\"\n      )\n    )\n    \n    # Format existing columns\n    df$date <- as_date(df$date)\n    df$amount <- as.numeric(df$amount)\n\n    # Initialize necessary DB columns\n    df$conv_amount <- df$amount             # Assume that Converted Amount = Original Amount\n    df$fx_rate <- 1                         # Set all fx rates to 1\n    df$conv_currency <- user.base_currency()# Set \"Converted to\" currency as the user's base currency\n    \n    # Extract transactions for which the currency is NOT the user's base currency (we need to grab fx rates for these transactions)\n    conv_date_amt <- df[df$currency != user.base_currency(), c(\"date\", \"currency\", \"amount\")] \n    \n    # Check if fx_rates need to be retrieved. Number of rows will be 0 if all transactions are in the base currency\n    if(nrow(conv_date_amt) > 0){\n      conv_date_amt$fx_rate <- apply(X = conv_date_amt, MARGIN = 1, FUN = get_FX_rate) # Grab the fx rate for each transaction\n      conv_date_amt$conv_amt <- conv_date_amt$fx_rate * conv_date_amt$amount           # Convert amount to base currency\n      \n      # Add data to transactions in foreeign currencies\n      df$conv_amount[df$currency != user.base_currency(), c(\"conv_amount\", \"fx_rate\")] <- conv_date_amt[,c(\"conv_amt\", \"fx_rate\")]\n      \n    }\n    \n    df$date <- as.character(df$date)\n    \n    DB_upload_df(df, tblname = user()) #Upload data\n    \n    return(\"Success\")\n    \n  }) # Handles data uploaded via .CSV\n  output$settings.upload.new_records_status <- renderText({new_transactions()})\n  \n  # Modals ------------------------------------------------------------------\n  modal.expense_entry <- reactive({\n    modalDialog(title = \"Add Expense\", size = \"l\", easyClose = F, #footer = actionButton(\"ee.dm\",label = \"Dismiss\"),\n                fluidPage(\n                  fluidRow(\n                    column(5, selectInput(inputId = \"expense_entry.currency\", label = \"Currency\",\n                                          choices = c(\"USD\", \"EUR\"), selected = \"USD\", multiple = FALSE)),\n                    column(7, numericInput(inputId = \"expense_entry.amount\", label = \"Amount\",\n                                           value = NULL, min = 0))\n                  ),\n                  fluidRow(\n                    column(5, dateInput(inputId = \"expense_entry.date\", label = \"Date\", max = today(),\n                                        value = today(), weekstart = 1)),\n                    column(7, selectInput(inputId = \"expense_entry.category\", label = \"Category\", choices = user.categories(), multiple = FALSE))\n                  ),\n                  fluidRow(\n                    column(12,\n                           textAreaInput(inputId = \"expense_entry.comment\", label = \"Comments\", resize = \"vertical\"),\n                           hr(),\n                           actionButton(inputId = \"expense_entry.add\", label = \"Submit\"),\n                           hr(),\n                           textOutput(outputId = \"expense_entry.status\")\n                    )\n                  )\n                ))})\n  modal.savings_entry <- reactive({\n    modalDialog(title = \"Add Deposit\", size = \"l\", easyClose = T, #footer = actionButton(\"se.dm\",label = \"Dismiss\"),\n                fluidPage(\n                  h4(\"Add Deposit\", align = \"center\"),\n                  hr(),\n                  fluidRow(\n                    column(5, textOutput(\"user.base_currency\")),\n                    column(7, numericInput(inputId = \"savings_entry.amount\", label = \"Amount\",\n                                           value = 0, min = 0))\n                  ),\n                  fluidRow(\n                    column(5, dateInput(inputId = \"savings_entry.date\", label = \"Date\", max = today(),\n                                        value = today(), weekstart = 1)),\n                    column(7, selectInput(inputId = \"savings_entry.category\", label = \"Category\", choices = user.categories(), multiple = FALSE))\n                  ),\n                  fluidRow(\n                    column(12,\n                           textAreaInput(inputId = \"savings_entry.comment\", label = \"Comments\", resize = \"vertical\"),\n                           hr(),\n                           actionButton(inputId = \"savings_entry.add\", label = \"Submit\"),\n                           hr(),\n                           textOutput(outputId = \"savings_entry.status\")\n                    )\n                  )\n                )\n    )\n  })\n  modal.expense_remove <- reactive({\n    modalDialog(title = \"Delete Selected Expenses\", size = \"l\", easyClose = T, #footer = actionButton(\"er.dm\",label = \"Dismiss\"),\n                fluidPage(\n                  fluidRow(\n                    dataTableOutput(\"expense.history_table_selected\"),\n                    br(),\n                    strong(\"Delete these transactions?\", style = \"color:red\"),\n                    actionButton(\"expense.delete_confirm\", \"Yes\")\n                  )\n                )\n    )\n  })\n  modal.savings_remove <- reactive({\n    modalDialog(title = \"Delete Selected Deposits\", size = \"l\", easyClose = T, #footer = actionButton(\"sr.dm\",label = \"Dismiss\"),\n                fluidPage(\n                  fluidRow(\n                    dataTableOutput(\"savings.history_table_selected\"),\n                    br(),\n                    strong(\"Delete these transactions?\", style = \"color:red\"),\n                    actionButton(\"savings.delete_confirm\", \"Yes\")\n                  )\n                )\n    )\n  })\n  modal.expense_edit <- reactive({\n    modalDialog(title = \"Modify Expense\", size = \"l\", easyClose = T,# footer = actionButton(\"eed.dm\",label = \"Dismiss\"),\n                fluidPage(\n                  fluidRow(\n                    h3(\"Current Entry:\"),\n                    dataTableOutput(\"expense.history_table_last_selected\")\n                  ),\n                  fluidRow(\n                    h3(\"Modified Entry:\"),\n                    column(5, selectInput(inputId = \"expense_modify.currency\", label = \"Currency\",\n                                          choices = c(\"USD\", \"EUR\"), selected = exp_tbl_last_selected()$currency, multiple = FALSE)),\n                    column(5, numericInput(inputId = \"expense_modify.amount\", label = \"Amount\",\n                                           value = exp_tbl_last_selected()$amount, min = 0))\n                  ),\n                  fluidRow(\n                    column(5, dateInput(inputId = \"expense_modify.date\", label = \"Date\", max = today(),\n                                        value =  exp_tbl_last_selected()$date, weekstart = 1)),\n                    column(5, selectInput(inputId = \"expense_modify.category\", label = \"Category\", choices = user.categories(), selected =  exp_tbl_last_selected()$category, multiple = FALSE))\n                  ),\n                  fluidRow(\n                    column(12,\n                           textAreaInput(inputId = \"expense_modify.comment\", value =exp_tbl_last_selected()$comments, label = \"Comments\", resize = \"vertical\"),\n                           hr(),\n                           actionButton(inputId = \"expense_modify.add\", label = \"Submit\"),\n                           hr(),\n                           textOutput(outputId = \"expense_modify.status\")\n                    )\n                  )\n                ))\n  })\n  modal.savings_edit <- reactive({\n    modalDialog(title = \"Modify Deposit\", size = \"l\", easyClose = T, #footer = actionButton(\"sed.dm\",label = \"Dismiss\"),\n                fluidPage(\n                  fluidRow(\n                    h3(\"Current Entry:\"),\n                    dataTableOutput(\"savings.history_table_last_selected\")\n                  ),\n                  fluidRow(\n                    h3(\"Modified Entry:\"),\n                    column(5, selectInput(inputId = \"savings_modify.currency\", label = \"Currency\",\n                                          choices = c(\"USD\", \"EUR\"), selected =  sav_tbl_last_selected()$currency, multiple = FALSE)),\n                    column(5, numericInput(inputId = \"savings_modify.amount\", label = \"Amount\",\n                                           value = sav_tbl_last_selected()$amount, min = 0))\n                  ),\n                  fluidRow(\n                    column(5, dateInput(inputId = \"savings_modify.date\", label = \"Date\", max = today(),\n                                        value = sav_tbl_last_selected()$date, weekstart = 1)),\n                    column(5, selectInput(inputId = \"savings_modify.category\", label = \"Category\", selected = sav_tbl_last_selected()$category, choices = user.categories(), multiple = FALSE))\n                  ),\n                  fluidRow(\n                    column(12,\n                           textAreaInput(inputId = \"savings_modify.comment\", label = \"Comments\", sav_tbl_last_selected()$comments, resize = \"vertical\"),\n                           hr(),\n                           actionButton(inputId = \"savings_modify.add\", label = \"Submit\"),\n                           hr(),\n                           textOutput(outputId = \"savings_modify.status\")\n                    )\n                  )\n                ))\n  })\n})\n\n\n\n\n\n\n\n",
    "created" : 1519224144193.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "22|32|29|0|\n30|36|41|0|\n130|40|145|0|\n147|91|178|0|\n179|86|181|0|\n182|86|184|0|\n186|98|211|0|\n240|32|242|0|\n243|32|245|0|\n247|57|266|0|\n291|48|295|0|\n296|66|327|0|\n328|56|345|0|\n346|36|348|0|\n369|23|381|2|\n382|24|390|2|\n392|39|423|2|\n424|55|441|2|\n442|36|456|2|\n457|34|461|2|\n462|39|484|2|\n485|45|492|2|\n493|11|498|2|\n501|35|503|2|\n504|35|506|2|\n507|38|509|2|\n510|46|513|2|\n514|38|516|2|\n517|46|520|2|\n521|38|523|2|\n524|38|526|2|\n530|33|543|2|\n546|11|698|2|\n550|36|589|23|\n590|36|605|23|\n606|35|621|23|\n622|33|669|11|\n672|19|696|8|\n702|38|708|2|\n709|35|717|2|\n722|29|728|2|\n729|36|732|2|\n733|36|744|2|\n745|34|747|2|\n750|36|752|4|\n754|43|756|4|\n757|41|759|4|\n760|41|763|4|\n764|39|767|4|\n770|34|779|2|\n780|29|784|2|\n786|52|790|2|\n791|55|793|2|\n796|23|799|2|\n800|32|803|2|\n804|37|807|2|\n808|73|829|2|\n830|75|859|2|\n860|51|868|4|\n869|60|877|2|\n878|65|886|2|\n889|23|892|2|\n893|32|896|2|\n897|37|900|2|\n901|73|914|2|\n915|75|935|2|\n936|51|943|4|\n944|60|951|2|\n952|65|959|2|\n962|52|964|2|\n965|79|966|48|\n968|76|969|45|\n971|76|972|45|\n974|108|982|4|\n984|32|1046|2|\n1050|35|1073|18|\n1074|35|1100|2|\n1101|36|1112|2|\n1113|36|1124|2|\n1125|34|1154|2|\n1155|34|1184|2|\n",
    "hash" : "4004658896",
    "id" : "B9D46393",
    "lastKnownWriteTime" : 1523144680,
    "last_content_update" : 1523144680719,
    "path" : "~/GitHub/Expense-Tracker/server.R",
    "project_path" : "server.R",
    "properties" : {
        "docOutlineVisible" : "1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}